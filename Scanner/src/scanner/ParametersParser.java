package challenge;

import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 * @author tere
 *
 */

public class ParametersParser {

	/** Gets the implicit parameters for the GET/POST
	 * @param url
	 * @param cookie 
	 * @return Form - Null if there is no form. If there is,
	 * method, action and names for the parameters. See @Form
	 * @throws IOException
	 * @throws NoFormException
	 */
	public static Form parsingForm(String url, String cookie) throws IOException{
		Connection c= Jsoup.connect(url).followRedirects(false);
		
		Map<String, String> cookies_map = new HashMap<String,String>();
		if(cookie.length()>0){
			String[] cookies = cookie.split("; ");
			for(String s: cookies){
				String[] actual_cookie = s.split("=");
				cookies_map.put(actual_cookie[0], actual_cookie[1]);
			}
			
			c = c.cookies(cookies_map);
		} 
		
		Document doc = c.get();
		Elements form = doc.select("form");
		if (form!=null && !form.isEmpty()){
			Elements inputs = form.select("input");
			List<String> parameters = new LinkedList<String>();
			Elements textsAreas = form.select("textarea");
			String method = form.attr("method"); // GET or POST
			String action = form.attr("action"); // path to attack!
	
			ListIterator<Element> itrInputs = inputs.listIterator();
			
			while (itrInputs.hasNext()) {
				Element element = itrInputs.next();
				String name = element.attr("name");
				if(!name.equals("")){
					parameters.add(name);
				}
			}
	
			ListIterator<Element> itrAreas = textsAreas.listIterator();
			while (itrAreas.hasNext()) {
				Element element = itrAreas.next();
				String name = element.attr("name");
				if(!name.equals(null)){
					parameters.add(name);
				}
			}
			return new Form(method, action, parameters);
		}else{
			System.out.println("No forms in "+url);
			return null;
		}
	}
	
	/** Forms the parameters string 
	 * @param form - parameters name's information
	 * @param values - values for each parameter
	 * @return String containing the parameters that goes in the url or the request body
	 * @throws IOException
	 */
	public static String getUrlParams(Form form, List<String> values) throws IOException{

		StringBuffer urlParamsBuffer = new StringBuffer();
		List<String> params = form.getParameters();	
		if(values.size() <= params.size()){
			for(int j=values.size(); j<params.size();j++){
				values.add("");
			}
		}
		
		for(int i=0; i<params.size();i++){
			urlParamsBuffer.append(params.get(i)+"="+values.get(i)+"&");
		}
		String urlParam = urlParamsBuffer.toString();
		urlParam = urlParam.substring(0, urlParam.length()-1);
		
		return urlParam;
	}
	
	/** Forms the URL to attack with the url of the web page, 
	 * the form information and a boolean about having parameters
	 * @param url - The URL of the page we are attacking
	 * @param form - The form recived form ParametersParse. See @Form
	 * @param hasParameters - if it has parameters/form or not
	 * @return a String containing the url to attack w/o the parameters
	 */
	static String formURL(URL url, Form form, boolean hasParameters) {
		String urlToAttack = "";
		String protocol = url.getProtocol();
		String path = url.getPath();
		String host = url.getHost();
		String action = "";
		if(form!=null){
			action = form.getAction();
		}

		if (action.length() != 0 && path.contains(action)) {
			int index = path.indexOf(action);
			path = path.substring(0, index);
		}
		if (!host.endsWith("/") && !path.startsWith("/")) {
			host = host + "/";
		}
		//Absolute path
		if (action.startsWith(protocol)) {
			return action;
		} else if (action.equals("") || action.equals("#") || action.length() == 0) {
			urlToAttack = protocol + "://" + host + path;
		} else {
			urlToAttack = protocol + "://" + host + action;
		}
		if (hasParameters) {
			urlToAttack = urlToAttack + "?";
		}
		if(form==null && !action.endsWith("/")){
			urlToAttack = urlToAttack + "/";
		}
		System.out.println(urlToAttack);

		return urlToAttack;
	}

}
