package challenge;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;


/** Proper functions to manage the database methods
 * 
 * @author tere
 *
 */
public class DataBaseManager {

	private static String tableName = "vulnerableUrls";
//	private static String databaseName = "xssmeli"; //MeLi = Mercado Libre.
	
	/** Connects to database
	 * @param path - String containing the path to the database properties file
	 * @return the connection (session) with the database specified in the path file
	 * @throws IOException
	 */
	public static Connection connect(String path) throws IOException {
		
		System.out.println("-------- MySQL JDBC Connection ------------");

		Properties props = new Properties();
		FileInputStream in = new FileInputStream(path);
		props.load(in);
		in.close();

		String driver = props.getProperty("jdbc.driverClassName");
		try {
			if (driver != null) {
				Class.forName(driver);
			}
		} catch (ClassNotFoundException e) {
			System.out.println("Where is your MySQL JDBC Driver?");
			e.printStackTrace();
			return null;
		}

		String url = props.getProperty("jdbc.url");
		String username = props.getProperty("jdbc.username");
		String password = props.getProperty("jdbc.password");

		System.out.println("MySQL JDBC Driver Registered!");
		Connection connection = null;

		try {
			connection = DriverManager.getConnection(url, username, password);

		} catch (SQLException e) {
			System.out.println("Connection Failed! Check output console");
			e.printStackTrace();
			return null;
		}

		if (connection != null) {
			System.out.println("Database connection succeded");
			return connection;
		} else {
			System.out.println("Failed to make connection!");
			return null;
		}
	}
	
	/** Creates a table to save vulnerable URLs if it's not there
	 * @param conn - A session/connection with the database
	 */
	public static void start(Connection conn){
		String tableName = "vulnerableUrls";
		Statement stmt = null;

		try{
			stmt = conn.createStatement();
			String createTableQuery = "CREATE TABLE IF NOT EXISTS " + tableName 
					+"(url VARCHAR(255) not NULL, " +
					"parameters VARCHAR(255),"+
	                " PRIMARY KEY ( url ))"; 
			stmt.executeUpdate(createTableQuery);
			
			
		}catch(SQLException e){
			System.out.println("Error while creating table");
			e.printStackTrace();
		}
	}
	
	/** Adds an entry to the vulnerable URL's table. If the url is already there 
	 * it just ignore the new entry
	 * @param conn - A session/connection with the database
	 * @param url - String containing the vulnerable url
	 * @param params - Array of strings containing the vulnerable parameters
	 */
	public static void addURL(Connection conn, String url, String[] params){
		String paramsValue = "";
		if(params.length>0){
			for (String s:params){
				paramsValue+=s+",";
			} paramsValue = paramsValue.substring(0, paramsValue.length()-1);
		}

		try{ 
			String sql = "INSERT IGNORE INTO "+ tableName +"(url, parameters)" +
			        "VALUES (?, ?)";
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, url);
			preparedStatement.setString(2,paramsValue);
			preparedStatement.executeUpdate();
			
		}catch(SQLException e){
			System.out.println("Error while creating table");
			e.printStackTrace();
		}
		
	}

}