package challenge;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;

/**
 * @author tere
 *
 */
public class sendRequestAttackClass {

	/**
	 * Make an XSS attack through GET
	 * 
	 * @param urlString - the URL to be attacked
	 * @param attackString  - the string we will attack with, not encoded
	 * @return true if reflected XSS attack was successful, false if not
	 * @throws UnsupportedEncodingException for UTF-8
	 * @throws URISyntaxException
	 * @throws MalformedURLException
	 */
	public static boolean getAttack(String urlString, String params, String attackString, String cookie)
			throws UnsupportedEncodingException, URISyntaxException, MalformedURLException {
		String newUrl = urlString + params;
		httpResponse response;
		try {
			response = sendGet(newUrl, cookie);

			return response.getResponseCode() == 200 && response.getResponse().indexOf(attackString) != -1;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * Sends a GET to a URL
	 * 
	 * @param urlString
	 *            - the string of the URL
	 * @return httpResponse - the response code and the response.
	 *         See @httpResponse
	 * @throws Exception
	 */
	protected static httpResponse sendGet(String urlString, String cookie) throws Exception {
		// System.out.println(urlString);
		URL url = new URL(urlString);

		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		if (!cookie.equals("")) {
			con.setRequestProperty("Cookie", cookie);
		}
		System.out.println("cookie "+cookie);
		con.setRequestMethod("GET");

		int responseCode = con.getResponseCode();
		System.out.println("Sending 'GET' request to URL : " + url.toString());
		System.out.println("Response Code : " + responseCode);

		if(responseCode==200){
			BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
			
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			
//			System.out.println(response.toString());
			
			return new httpResponse(responseCode, response);
		}else{
			throw new Exception("Error 404");
		}
		

	}


	/** Makes an XSS attack through POST
	 * @param url - The url the user wants to attack
	 * @param urlParameters - parameters we want to put in the request
	 * @param attackString - the string we are attacking with
	 * @param cookie - optional
	 * @return true if reflected XSS attack was successful, false if not
	 */
	public static boolean postAttack(String url, String urlParameters, String attackString, String cookie) {
		httpResponse response;
		try {
			response = sendPost(url, urlParameters, cookie);

			return response.getResponseCode() == 200 && response.getResponse().indexOf(attackString) != -1;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	/** Send a POST a @targetURL
	 * @param targetURL - String with the URL we want to make the request
	 * @param urlParameters - Parameters to put in the request body
	 * @param cookie - optional
	 * @return response and response code in httpResponse class. see @httpResponse
	 * @throws IOException
	 */
	protected static httpResponse sendPost(String targetURL, String urlParameters, String cookie) throws IOException {
		URL url = new URL(targetURL);
		HttpURLConnection con = (HttpURLConnection) url.openConnection();

		con.setRequestMethod("POST");
		if (!cookie.equals("")) {
			con.setRequestProperty("Cookie", cookie);
		}

		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + urlParameters);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();

		// System.out.println(response.toString());

		return new httpResponse(responseCode, response);

	}

	/**
	 * A class that represents an httpResponse, containing only the response
	 * code and the response itself
	 * 
	 * @author tere
	 */
	protected static class httpResponse {
		int responseCode;
		StringBuffer response;

		public httpResponse(int responseCode, StringBuffer response) {
			this.responseCode = responseCode;
			this.response = response;
		}

		public int getResponseCode() {
			return responseCode;
		}

		public StringBuffer getResponse() {
			return response;
		}
	}

}
