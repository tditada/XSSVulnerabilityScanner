package challenge;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Type;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.LinkedList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;

/**
 * @author tere
 *
 */
public class AttackManager {

	public AttackManager() {

	}

	/** Do the attack. It calls functions to read the attacks and parse forms on the page, 
	 * and do things according to the parse (form existence, form method, parameters) 
	 * 
	 * @param url - A string with the url to attack
	 * @param attackFile - the JSON file with the XSS attacks 
	 * @param cookie - A cookie (optional)
	 * @return the vulnerable parameters if the url is vulnerable or null 
	 * @throws IOException
	 * @throws URISyntaxException
	 */
	public static List<String> attack(String url, String attackFile, String cookie)
			throws IOException, URISyntaxException {

		Attacks attacks = readJSONAttacks(attackFile);
		System.out.println("Url" + url);
		Form form = ParametersParser.parsingForm(url, cookie);
		boolean isVulnerable = false;
		if (form == null || form.getParameters().size() == 0) {
			System.out.println("GET - No form");
			for (String a : attacks.getAttacks()) {
				String encodedAttack = URLEncoder.encode(a, "UTF-8");
				encodedAttack = encodedAttack.replace("+", "%20");
				URL urlClass = new URL(url);
				String urlToAttack = ParametersParser.formURL(urlClass, form, false);

				boolean ret = sendRequestAttackClass.getAttack(urlToAttack+encodedAttack, "", a, cookie);
				isVulnerable = isVulnerable || ret;
				System.out.println("Is vulnerable: " + ret + "\n");
			}
		} else if (form.getParameters().size() > 0 && form.getMethod().toUpperCase().equals("GET")) {
			System.out.println("GET - There is a form");
			for (String s : attacks.getAttacks()) {
				String encodedAttack = URLEncoder.encode(s, "UTF-8");
				List<List<String>> values_list = getValuesForParameters(form, encodedAttack);
				for (List<String> values : values_list) {
					String urlParams = ParametersParser.getUrlParams(form, values);
					URL urlClass = new URL(url);
					String urlToAttack = ParametersParser.formURL(urlClass, form, true);

					boolean ret = sendRequestAttackClass.getAttack(urlToAttack, urlParams, s, cookie);
					isVulnerable = isVulnerable || ret;
					System.out.println("Is vulnerable: " + ret + "\n");
				}

			}
		} else if (form.getMethod().toUpperCase().equals("POST")) {
			System.out.println("POST");
			for (String s : attacks.getAttacks()) {
				String encodedAttack = URLEncoder.encode(s, "UTF-8");
				List<List<String>> values_list = getValuesForParameters(form, encodedAttack);

				for (List<String> values : values_list) {
					String urlParams = ParametersParser.getUrlParams(form, values);
					URL urlClass = new URL(url);
					String urlToAttack = ParametersParser.formURL(urlClass, form, false);

					boolean ret = sendRequestAttackClass.postAttack(urlToAttack, urlParams, s, cookie);
					isVulnerable = isVulnerable || ret;
					System.out.println("Is vulnerable: " + ret + "\n");
				}
			}
		}
		if (isVulnerable && form == null) {
			return new LinkedList<String>();
		}
		return isVulnerable ? form.getParameters() : null;

	}

	

	/** Creates various list of values to insert in the parameters. The lists 
	 * are the attack  string in each one of the parameters and the rest empty.
	 * @param form - See @Form
	 * @param attack - the string we want to use in the attack
	 * @return Lists of values to insert in the parameters
	 */
	private static List<List<String>> getValuesForParameters(Form form, String attack) {
		int parametersCant = form.getParamsCant();
		List<List<String>> valuesLists = new LinkedList<List<String>>();

		// Try the attack in the differents parameters
		for (int j = 0; j < parametersCant; j++) {
			List<String> value = new LinkedList<String>();
			for (int i = 0; i < parametersCant; i++) {
				if (i == j) {
					value.add(attack);
				} else {
					value.add("");
				}
			}
			valuesLists.add(value);
		}

		return valuesLists;
	}

	/** Method that reads the JSON containing the attacks in an Array of Strings, 
	 * and put the information into Attacks class. See @Attacks
	 * @param attackFile - the path to the JSON file
	 * @return strings of attack in @Attacks
	 * @throws FileNotFoundException - Error reading JSON file
	 */
	public static Attacks readJSONAttacks(String attackFile) throws FileNotFoundException {

		JsonReader reader = new JsonReader(new FileReader(attackFile));
		Gson gson = new Gson();
		Type typeOfAttacks = new TypeToken<Attacks>() {
		}.getType();
		Attacks attacks = gson.fromJson(reader, typeOfAttacks);

		return attacks;
	}

}
