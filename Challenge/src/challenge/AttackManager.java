package challenge;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Type;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.LinkedList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;

/**
 * @author tere
 *
 */
public class AttackManager {

	public AttackManager() {

	}

	public static List<String> attack(String url, String attackFile, String cookie) throws IOException, URISyntaxException {

		Attacks attacks = readJSONAttacks(attackFile);

		Form form = ParametersParser.parsingForm(url);
		
		boolean isVulnerable = false;
		
		if (form.getParameters().size() > 0 && form.getMethod().equals("get")) {
			System.out.println("GET - There is a form");
			for (String s : attacks.getAttacks()) {
				String encodedAttack = URLEncoder.encode(s, "UTF-8");
				List<List<String>> values_list = getValuesForParameters(form, encodedAttack);

				for (List<String> values : values_list) {
					String urlParams = ParametersParser.getUrlParams(form, values);
					URL urlClass = new URL(url);
					String urlToAttack = "";
					if (form.getAction().equals("")) {
						urlToAttack = urlClass.getProtocol() + "://" + urlClass.getHost() + urlClass.getPath() + "?";
					} else {
						urlToAttack = urlClass.getProtocol() + "://" + urlClass.getHost() + form.getAction() + "?";
					}
					boolean ret = getAttackClass.getAttack(urlToAttack, urlParams, s, cookie);
					isVulnerable = isVulnerable || ret;
					System.out.println("Is vulnerable: " + ret);
				}

			}
		} else if(form.getMethod().equals("get")){
			System.out.println("GET - No form");
			for (String a : attacks.getAttacks()) {
				String encodedAttack = URLEncoder.encode(a, "UTF-8");
				encodedAttack = encodedAttack.replace("+", "%20");
				URL urlClass = new URL(url);
				String urlToAttack = urlClass.getProtocol() + "://" + urlClass.getHost() + urlClass.getPath() + "/"
						+ encodedAttack;
				boolean ret = getAttackClass.getAttack(urlToAttack, "", a, cookie);
				isVulnerable = isVulnerable || ret;
				System.out.println("Is vulnerable: " + ret);
			}
		}else if(form.getMethod().equals("post")){
//			System.out.println("POST");
//			for (String s : attacks.getAttacks()) {
//				String encodedAttack = URLEncoder.encode(s, "UTF-8");
//				List<List<String>> values_list = getValuesForParameters(form, encodedAttack);
//
//				for (List<String> values : values_list) {
//					String urlParams = ParametersParser.getUrlParams(form, values);
//					URL urlClass = new URL(url);
//					String urlToAttack = "";
//					if (form.getAction().equals("")) {
//						urlToAttack = urlClass.getProtocol() + "://" + urlClass.getHost() + urlClass.getPath() + "?";
//					} else {
//						urlToAttack = urlClass.getProtocol() + "://" + urlClass.getHost() + form.getAction() + "?";
//					}
//					boolean ret = postAttackClass.excutePost(urlToAttack, urlParams);
//					isVulnerable = isVulnerable || ret;
//					System.out.println("Is vulnerable: " + ret);
//				}
		}
		
		return isVulnerable?form.getParameters():null;

	}

	private static List<List<String>> getValuesForParameters(Form form, String attack) {
		int parametersCant = form.getParamsCant();
		List<List<String>> valuesLists = new LinkedList<List<String>>();

		// Try the attack in the differents parameters
		for (int j = 0; j < parametersCant; j++) {
			List<String> value = new LinkedList<String>();
			for (int i = 0; i < parametersCant; i++) {
				if (i == j) {
					value.add(attack);
				} else {
					value.add("");
				}
			}
			valuesLists.add(value);
		}

		return valuesLists;
	}

	public static Attacks readJSONAttacks(String attackFile) throws FileNotFoundException {

		JsonReader reader = new JsonReader(new FileReader(attackFile));
		Gson gson = new Gson();
		Type typeOfAttacks = new TypeToken<Attacks>() {
		}.getType();
		Attacks attacks = gson.fromJson(reader, typeOfAttacks);

		return attacks;
	}

//	public static void main(String[] args) throws IOException, URISyntaxException {
//		String url = "https://google-gruyere.appspot.com/683962442778/newsnippet.gtl";
//		// //with cookie (Stored XSS)
//		String url2 = "https://xss-game.appspot.com/level1/frame";
//		String url3 = "https://google-gruyere.appspot.com/683962442778";
//		// String url4="http://192.168.0.13/dvwa/vulnerabilities/xss_r";
//
//		attack(url, "./strings.json", "GRUYERE=91551079|asd||author; GRUYERE_ID=683962442778");
//		 attack(url2, "./strings.json", "");
//		 attack(url3, "./strings.json", "");
//		 attack(url4, "./strings.json", "security=high; PHPSESSID=d3s089m3kvasiq77jaf7jf9ik6");
//	}
}
