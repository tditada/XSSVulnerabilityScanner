package challenge;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;

/**
 * @author tere
 *
 */
public class getAttackClass {

	/**
	 * Make an attack through GET
	 * 
	 * @param urlString
	 *            - the URL to be attacked
	 * @param attackString
	 *            - the string we will attack with, not encoded
	 * @return true if attack was successful, false if not
	 * @throws UnsupportedEncodingException
	 *             for UTF-8
	 * @throws URISyntaxException
	 * @throws MalformedURLException 
	 */
	public static boolean getAttack(String urlString, String params, String attackString, String cookie)
			throws UnsupportedEncodingException, URISyntaxException, MalformedURLException {
		String newUrl = urlString + params;
		httpResponse response;
		try {
			response = sendGet(newUrl,cookie);

			return response.getResponseCode() == 200 && response.getResponse().indexOf(attackString) != -1;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * Sends a GET to a URL
	 * 
	 * @param urlString
	 *            - the string of the URL
	 * @return httpResponse - the response code and the response.
	 *         See @httpResponse
	 * @throws Exception
	 */
	private static httpResponse sendGet(String urlString, String cookie) throws Exception {

		URL url = new URL(urlString);
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		if(!cookie.equals("")){
			con.setRequestProperty("Cookie", cookie);			
		}
	
		con.setRequestMethod("GET");

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'GET' request to URL : " + url.toString());
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();

		 System.out.println(response.toString());

		return new httpResponse(responseCode, response);
	}

	public static void main(String[] args) throws Exception {

	}

	/**
	 * A class that represents an httpResponse, containing only the response
	 * code and the response itself
	 * 
	 * @author tere
	 */
	private static class httpResponse {
		int responseCode;
		StringBuffer response;

		public httpResponse(int responseCode, StringBuffer response) {
			this.responseCode = responseCode;
			this.response = response;
		}

		public int getResponseCode() {
			return responseCode;
		}

		public StringBuffer getResponse() {
			return response;
		}
	}

}
