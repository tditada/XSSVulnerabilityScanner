package challenge;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;


//TODO: parse html to get parameters for get (and post)
//TODO: DB connection
//TODO: test cases
//TODO: image

public class getAttackClass {
	
	public static boolean getAttack(String urlString, String attackString) throws UnsupportedEncodingException{
		
		//TODO: change this
		String attackStringEncoded = URLEncoder.encode(attackString,"UTF-8");
		String attack = "?query=" + attackStringEncoded;
		
		String newUrl = urlString + attack;
		
		httpResponse response;
		try {
			response = sendGet(newUrl);
			return 	response.getResponseCode()==200 && response.getResponse().indexOf(attackString)!=-1;
		} catch (Exception e) {
			//e.printStackTrace();
		}
			return false;
	}
	
	private static httpResponse sendGet(String urlString) throws Exception {
		
		URL url = new URL(urlString);
		HttpURLConnection con = (HttpURLConnection) url.openConnection();

		con.setRequestMethod("GET");

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'GET' request to URL : " + url.toString());
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();
		
		//System.out.println(response.toString());
		
		return new httpResponse(responseCode, response);
	}
	
	public static void main(String[] args) throws Exception {
		
		JsonReader reader = new JsonReader(new FileReader("./strings.json"));	
		Gson gson = new Gson();
		Type typeOfAttacks = new TypeToken<Attacks>(){}.getType();
		Attacks attacks = gson.fromJson(reader, typeOfAttacks);
		for (String s:attacks.getAttacks()){
			boolean ret = getAttack("https://xss-game.appspot.com/level1/frame",s);
			System.out.println("Is vulnerable: " + ret);
		}

	}

	private static class httpResponse{
		int responseCode;
		StringBuffer response;
		
		public httpResponse(int responseCode, StringBuffer response) {
			this.responseCode=responseCode;
			this.response=response;
		}

		public int getResponseCode() {
			return responseCode;
		}
	
		public StringBuffer getResponse() {
			return response;
		}
	}
	
}

